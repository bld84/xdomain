/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L2DaiGatewayInterface extends utils.Interface {
  functions: {
    "calculateL2TokenAddress(address)": FunctionFragment;
    "close()": FunctionFragment;
    "counterpartGateway()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "finalizeInboundTransfer(address,address,address,uint256,bytes)": FunctionFragment;
    "getOutboundCalldata(address,address,address,uint256,bytes)": FunctionFragment;
    "isOpen()": FunctionFragment;
    "l1Counterpart()": FunctionFragment;
    "l1Dai()": FunctionFragment;
    "l2Dai()": FunctionFragment;
    "l2Router()": FunctionFragment;
    "outboundTransfer(address,address,uint256,bytes)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateL2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "counterpartGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "finalizeInboundTransfer",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundCalldata",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1Counterpart",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l1Dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2Dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2Router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outboundTransfer",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "calculateL2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counterpartGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeInboundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1Counterpart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1Dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outboundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Closed()": EventFragment;
    "Deny(address)": EventFragment;
    "DepositFinalized(address,address,address,uint256)": EventFragment;
    "Rely(address)": EventFragment;
    "TxToL1(address,address,uint256,bytes)": EventFragment;
    "WithdrawalInitiated(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalInitiated"): EventFragment;
}

export type ClosedEvent = TypedEvent<[], {}>;

export type ClosedEventFilter = TypedEventFilter<ClosedEvent>;

export type DenyEvent = TypedEvent<[string], { usr: string }>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export type DepositFinalizedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { l1Token: string; from: string; to: string; amount: BigNumber }
>;

export type DepositFinalizedEventFilter =
  TypedEventFilter<DepositFinalizedEvent>;

export type RelyEvent = TypedEvent<[string], { usr: string }>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string],
  { from: string; to: string; id: BigNumber; data: string }
>;

export type TxToL1EventFilter = TypedEventFilter<TxToL1Event>;

export type WithdrawalInitiatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    l1Token: string;
    from: string;
    to: string;
    l2ToL1Id: BigNumber;
    exitNum: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawalInitiatedEventFilter =
  TypedEventFilter<WithdrawalInitiatedEvent>;

export interface L2DaiGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2DaiGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counterpartGateway(overrides?: CallOverrides): Promise<[string]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizeInboundTransfer(
      l1Token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOutboundCalldata(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { outboundCalldata: string }>;

    isOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1Counterpart(overrides?: CallOverrides): Promise<[string]>;

    l1Dai(overrides?: CallOverrides): Promise<[string]>;

    l2Dai(overrides?: CallOverrides): Promise<[string]>;

    l2Router(overrides?: CallOverrides): Promise<[string]>;

    "outboundTransfer(address,address,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "outboundTransfer(address,address,uint256,uint256,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calculateL2TokenAddress(
    l1Token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  close(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counterpartGateway(overrides?: CallOverrides): Promise<string>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizeInboundTransfer(
    l1Token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOutboundCalldata(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isOpen(overrides?: CallOverrides): Promise<BigNumber>;

  l1Counterpart(overrides?: CallOverrides): Promise<string>;

  l1Dai(overrides?: CallOverrides): Promise<string>;

  l2Dai(overrides?: CallOverrides): Promise<string>;

  l2Router(overrides?: CallOverrides): Promise<string>;

  "outboundTransfer(address,address,uint256,bytes)"(
    l1Token: string,
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "outboundTransfer(address,address,uint256,uint256,uint256,bytes)"(
    l1Token: string,
    to: string,
    amount: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    close(overrides?: CallOverrides): Promise<void>;

    counterpartGateway(overrides?: CallOverrides): Promise<string>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    finalizeInboundTransfer(
      l1Token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getOutboundCalldata(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    l1Counterpart(overrides?: CallOverrides): Promise<string>;

    l1Dai(overrides?: CallOverrides): Promise<string>;

    l2Dai(overrides?: CallOverrides): Promise<string>;

    l2Router(overrides?: CallOverrides): Promise<string>;

    "outboundTransfer(address,address,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "outboundTransfer(address,address,uint256,uint256,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Closed()"(): ClosedEventFilter;
    Closed(): ClosedEventFilter;

    "Deny(address)"(usr?: string | null): DenyEventFilter;
    Deny(usr?: string | null): DenyEventFilter;

    "DepositFinalized(address,address,address,uint256)"(
      l1Token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null
    ): DepositFinalizedEventFilter;
    DepositFinalized(
      l1Token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null
    ): DepositFinalizedEventFilter;

    "Rely(address)"(usr?: string | null): RelyEventFilter;
    Rely(usr?: string | null): RelyEventFilter;

    "TxToL1(address,address,uint256,bytes)"(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null
    ): TxToL1EventFilter;
    TxToL1(
      from?: string | null,
      to?: string | null,
      id?: BigNumberish | null,
      data?: null
    ): TxToL1EventFilter;

    "WithdrawalInitiated(address,address,address,uint256,uint256,uint256)"(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      l2ToL1Id?: BigNumberish | null,
      exitNum?: null,
      amount?: null
    ): WithdrawalInitiatedEventFilter;
    WithdrawalInitiated(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      l2ToL1Id?: BigNumberish | null,
      exitNum?: null,
      amount?: null
    ): WithdrawalInitiatedEventFilter;
  };

  estimateGas: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counterpartGateway(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizeInboundTransfer(
      l1Token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOutboundCalldata(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    l1Counterpart(overrides?: CallOverrides): Promise<BigNumber>;

    l1Dai(overrides?: CallOverrides): Promise<BigNumber>;

    l2Dai(overrides?: CallOverrides): Promise<BigNumber>;

    l2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "outboundTransfer(address,address,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "outboundTransfer(address,address,uint256,uint256,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counterpartGateway(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizeInboundTransfer(
      l1Token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOutboundCalldata(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Counterpart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1Dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "outboundTransfer(address,address,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "outboundTransfer(address,address,uint256,uint256,uint256,bytes)"(
      l1Token: string,
      to: string,
      amount: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
