/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L1GovernanceRelayInterface extends utils.Interface {
  functions: {
    "deny(address)": FunctionFragment;
    "inbox()": FunctionFragment;
    "l2GovernanceRelay()": FunctionFragment;
    "reclaim(address,uint256)": FunctionFragment;
    "relay(address,bytes,uint256,uint256,uint256,uint256)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2GovernanceRelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reclaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relay",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2GovernanceRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reclaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Deny(address)": EventFragment;
    "Rely(address)": EventFragment;
    "TxToL2(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL2"): EventFragment;
}

export type DenyEvent = TypedEvent<[string], { usr: string }>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export type RelyEvent = TypedEvent<[string], { usr: string }>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export type TxToL2Event = TypedEvent<
  [string, string, BigNumber, string],
  { from: string; to: string; seqNum: BigNumber; data: string }
>;

export type TxToL2EventFilter = TypedEventFilter<TxToL2Event>;

export interface L1GovernanceRelay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1GovernanceRelayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    inbox(overrides?: CallOverrides): Promise<[string]>;

    l2GovernanceRelay(overrides?: CallOverrides): Promise<[string]>;

    reclaim(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relay(
      target: string,
      targetData: BytesLike,
      l1CallValue: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  inbox(overrides?: CallOverrides): Promise<string>;

  l2GovernanceRelay(overrides?: CallOverrides): Promise<string>;

  reclaim(
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relay(
    target: string,
    targetData: BytesLike,
    l1CallValue: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    maxSubmissionCost: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    inbox(overrides?: CallOverrides): Promise<string>;

    l2GovernanceRelay(overrides?: CallOverrides): Promise<string>;

    reclaim(
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relay(
      target: string,
      targetData: BytesLike,
      l1CallValue: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deny(address)"(usr?: string | null): DenyEventFilter;
    Deny(usr?: string | null): DenyEventFilter;

    "Rely(address)"(usr?: string | null): RelyEventFilter;
    Rely(usr?: string | null): RelyEventFilter;

    "TxToL2(address,address,uint256,bytes)"(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      data?: null
    ): TxToL2EventFilter;
    TxToL2(
      from?: string | null,
      to?: string | null,
      seqNum?: BigNumberish | null,
      data?: null
    ): TxToL2EventFilter;
  };

  estimateGas: {
    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    inbox(overrides?: CallOverrides): Promise<BigNumber>;

    l2GovernanceRelay(overrides?: CallOverrides): Promise<BigNumber>;

    reclaim(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relay(
      target: string,
      targetData: BytesLike,
      l1CallValue: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2GovernanceRelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaim(
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relay(
      target: string,
      targetData: BytesLike,
      l1CallValue: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      maxSubmissionCost: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
