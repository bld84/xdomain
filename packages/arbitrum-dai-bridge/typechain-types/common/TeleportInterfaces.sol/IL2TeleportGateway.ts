/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TeleportGUIDStruct = {
  sourceDomain: PromiseOrValue<BytesLike>;
  targetDomain: PromiseOrValue<BytesLike>;
  receiver: PromiseOrValue<BytesLike>;
  operator: PromiseOrValue<BytesLike>;
  amount: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
};

export type TeleportGUIDStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  number
] & {
  sourceDomain: string;
  targetDomain: string;
  receiver: string;
  operator: string;
  amount: BigNumber;
  nonce: BigNumber;
  timestamp: number;
};

export interface IL2TeleportGatewayInterface extends utils.Interface {
  functions: {
    "domain()": FunctionFragment;
    "flush(bytes32)": FunctionFragment;
    "initiateTeleport(bytes32,bytes32,uint128,bytes32)": FunctionFragment;
    "initiateTeleport(bytes32,address,uint128)": FunctionFragment;
    "initiateTeleport(bytes32,address,uint128,address)": FunctionFragment;
    "l1TeleportGateway()": FunctionFragment;
    "l2Token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "domain"
      | "flush"
      | "initiateTeleport(bytes32,bytes32,uint128,bytes32)"
      | "initiateTeleport(bytes32,address,uint128)"
      | "initiateTeleport(bytes32,address,uint128,address)"
      | "l1TeleportGateway"
      | "l2Token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,bytes32,uint128,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,address,uint128)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,address,uint128,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "l1TeleportGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2Token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,bytes32,uint128,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,address,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,address,uint128,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1TeleportGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Token", data: BytesLike): Result;

  events: {
    "Flushed(bytes32,uint256)": EventFragment;
    "TeleportInitialized(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeleportInitialized"): EventFragment;
}

export interface FlushedEventObject {
  targetDomain: string;
  dai: BigNumber;
}
export type FlushedEvent = TypedEvent<[string, BigNumber], FlushedEventObject>;

export type FlushedEventFilter = TypedEventFilter<FlushedEvent>;

export interface TeleportInitializedEventObject {
  teleport: TeleportGUIDStructOutput;
}
export type TeleportInitializedEvent = TypedEvent<
  [TeleportGUIDStructOutput],
  TeleportInitializedEventObject
>;

export type TeleportInitializedEventFilter =
  TypedEventFilter<TeleportInitializedEvent>;

export interface IL2TeleportGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IL2TeleportGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    domain(overrides?: CallOverrides): Promise<[string]>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<[string]>;

    l2Token(overrides?: CallOverrides): Promise<[string]>;
  };

  domain(overrides?: CallOverrides): Promise<string>;

  flush(
    targetDomain: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,address,uint128)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,address,uint128,address)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l1TeleportGateway(overrides?: CallOverrides): Promise<string>;

  l2Token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    domain(overrides?: CallOverrides): Promise<string>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<string>;

    l2Token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Flushed(bytes32,uint256)"(
      targetDomain?: PromiseOrValue<BytesLike> | null,
      dai?: null
    ): FlushedEventFilter;
    Flushed(
      targetDomain?: PromiseOrValue<BytesLike> | null,
      dai?: null
    ): FlushedEventFilter;

    "TeleportInitialized(tuple)"(
      teleport?: null
    ): TeleportInitializedEventFilter;
    TeleportInitialized(teleport?: null): TeleportInitializedEventFilter;
  };

  estimateGas: {
    domain(overrides?: CallOverrides): Promise<BigNumber>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<BigNumber>;

    l2Token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
