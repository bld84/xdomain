/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ArbSys",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbSys__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IInbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInbox__factory>;
    getContractFactory(
      name: "IMessageProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageProvider__factory>;
    getContractFactory(
      name: "IOutbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOutbox__factory>;
    getContractFactory(
      name: "IL1TeleportGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1TeleportGateway__factory>;
    getContractFactory(
      name: "IL1TeleportRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1TeleportRouter__factory>;
    getContractFactory(
      name: "IL2TeleportGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2TeleportGateway__factory>;
    getContractFactory(
      name: "L1CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CrossDomainEnabled__factory>;
    getContractFactory(
      name: "L1DaiGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1DaiGateway__factory>;
    getContractFactory(
      name: "TokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLike__factory>;
    getContractFactory(
      name: "L1DaiTeleportGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1DaiTeleportGateway__factory>;
    getContractFactory(
      name: "TokenLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLike__factory>;
    getContractFactory(
      name: "ApproveLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApproveLike__factory>;
    getContractFactory(
      name: "L1Escrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1Escrow__factory>;
    getContractFactory(
      name: "L1GovernanceRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1GovernanceRelay__factory>;
    getContractFactory(
      name: "L1ITokenGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ITokenGateway__factory>;
    getContractFactory(
      name: "Dai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dai__factory>;
    getContractFactory(
      name: "L2CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CrossDomainEnabled__factory>;
    getContractFactory(
      name: "L2DaiGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2DaiGateway__factory>;
    getContractFactory(
      name: "Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mintable__factory>;
    getContractFactory(
      name: "L2DaiTeleportGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2DaiTeleportGateway__factory>;
    getContractFactory(
      name: "Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mintable__factory>;
    getContractFactory(
      name: "L2GovernanceRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2GovernanceRelay__factory>;
    getContractFactory(
      name: "L2ITokenGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2ITokenGateway__factory>;
    getContractFactory(
      name: "BadSpell",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadSpell__factory>;
    getContractFactory(
      name: "Alice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Alice__factory>;
    getContractFactory(
      name: "DaiEchidnaTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DaiEchidnaTest__factory>;
    getContractFactory(
      name: "AuthLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthLike__factory>;
    getContractFactory(
      name: "BridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeLike__factory>;
    getContractFactory(
      name: "TestBridgeUpgradeSpell",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBridgeUpgradeSpell__factory>;
    getContractFactory(
      name: "MintLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintLike__factory>;
    getContractFactory(
      name: "TestDaiMintSpell",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDaiMintSpell__factory>;

    getContractAt(
      name: "ArbSys",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbSys>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IInbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInbox>;
    getContractAt(
      name: "IMessageProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageProvider>;
    getContractAt(
      name: "IOutbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOutbox>;
    getContractAt(
      name: "IL1TeleportGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1TeleportGateway>;
    getContractAt(
      name: "IL1TeleportRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1TeleportRouter>;
    getContractAt(
      name: "IL2TeleportGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2TeleportGateway>;
    getContractAt(
      name: "L1CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CrossDomainEnabled>;
    getContractAt(
      name: "L1DaiGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1DaiGateway>;
    getContractAt(
      name: "TokenLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLike>;
    getContractAt(
      name: "L1DaiTeleportGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1DaiTeleportGateway>;
    getContractAt(
      name: "TokenLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLike>;
    getContractAt(
      name: "ApproveLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApproveLike>;
    getContractAt(
      name: "L1Escrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1Escrow>;
    getContractAt(
      name: "L1GovernanceRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1GovernanceRelay>;
    getContractAt(
      name: "L1ITokenGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ITokenGateway>;
    getContractAt(
      name: "Dai",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Dai>;
    getContractAt(
      name: "L2CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CrossDomainEnabled>;
    getContractAt(
      name: "L2DaiGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2DaiGateway>;
    getContractAt(
      name: "Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mintable>;
    getContractAt(
      name: "L2DaiTeleportGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2DaiTeleportGateway>;
    getContractAt(
      name: "Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mintable>;
    getContractAt(
      name: "L2GovernanceRelay",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2GovernanceRelay>;
    getContractAt(
      name: "L2ITokenGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2ITokenGateway>;
    getContractAt(
      name: "BadSpell",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BadSpell>;
    getContractAt(
      name: "Alice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Alice>;
    getContractAt(
      name: "DaiEchidnaTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DaiEchidnaTest>;
    getContractAt(
      name: "AuthLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthLike>;
    getContractAt(
      name: "BridgeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeLike>;
    getContractAt(
      name: "TestBridgeUpgradeSpell",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBridgeUpgradeSpell>;
    getContractAt(
      name: "MintLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintLike>;
    getContractAt(
      name: "TestDaiMintSpell",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDaiMintSpell>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
