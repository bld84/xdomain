/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestBridgeUpgradeSpell,
  TestBridgeUpgradeSpellInterface,
} from "../TestBridgeUpgradeSpell";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_oldBridge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_newBridge",
        type: "address",
      },
    ],
    name: "upgradeBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c92ff21f14610030575b600080fd5b6100926004803603604081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610094565b005b600082905060008173ffffffffffffffffffffffffffffffffffffffff1663422e67f46040518163ffffffff1660e01b815260040160206040518083038186803b1580156100e157600080fd5b505afa1580156100f5573d6000803e3d6000fd5b505050506040513d602081101561010b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff166343d726d66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561016657600080fd5b505af115801561017a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16639c52a7f1856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156101fd57600080fd5b505af1158015610211573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166365fae35e846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b505050505050505056fea2646970667358221220de268ae066b730d610f7a6f6b8367b988355b8e3423ee1caf58a9b70c9326a5f64736f6c634300060b0033";

type TestBridgeUpgradeSpellConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestBridgeUpgradeSpellConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestBridgeUpgradeSpell__factory extends ContractFactory {
  constructor(...args: TestBridgeUpgradeSpellConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestBridgeUpgradeSpell> {
    return super.deploy(overrides || {}) as Promise<TestBridgeUpgradeSpell>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestBridgeUpgradeSpell {
    return super.attach(address) as TestBridgeUpgradeSpell;
  }
  connect(signer: Signer): TestBridgeUpgradeSpell__factory {
    return super.connect(signer) as TestBridgeUpgradeSpell__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBridgeUpgradeSpellInterface {
    return new utils.Interface(_abi) as TestBridgeUpgradeSpellInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestBridgeUpgradeSpell {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestBridgeUpgradeSpell;
  }
}
