/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestDaiMintSpell,
  TestDaiMintSpellInterface,
} from "../TestDaiMintSpell";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_dai",
        type: "address",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintDai",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610178806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636638634814610030575b600080fd5b61009c6004803603606081101561004657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061009e565b005b8273ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561012557600080fd5b505af1158015610139573d6000803e3d6000fd5b5050505050505056fea26469706673582212208ef15203abd36db6e0a09f989d7821a97bb32f19f0eae2cbe9fa241f0e746ee164736f6c634300060b0033";

type TestDaiMintSpellConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDaiMintSpellConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDaiMintSpell__factory extends ContractFactory {
  constructor(...args: TestDaiMintSpellConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestDaiMintSpell> {
    return super.deploy(overrides || {}) as Promise<TestDaiMintSpell>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestDaiMintSpell {
    return super.attach(address) as TestDaiMintSpell;
  }
  connect(signer: Signer): TestDaiMintSpell__factory {
    return super.connect(signer) as TestDaiMintSpell__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDaiMintSpellInterface {
    return new utils.Interface(_abi) as TestDaiMintSpellInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDaiMintSpell {
    return new Contract(address, _abi, signerOrProvider) as TestDaiMintSpell;
  }
}
