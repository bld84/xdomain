/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadSpell, BadSpellInterface } from "../BadSpell";

const _abi = [
  {
    inputs: [],
    name: "abort",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "someVar",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010c806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806321eba2da14603757806335a063b4146053575b600080fd5b603d605b565b6040518082815260200191505060405180910390f35b60596061565b005b60005481565b600060d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260068152602001807f41424f525421000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b56fea264697066735822122069c42238165e41b8c9b710902da65b6906681dea65d0c0aafde2187c40eef2ff64736f6c634300060b0033";

type BadSpellConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BadSpellConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BadSpell__factory extends ContractFactory {
  constructor(...args: BadSpellConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadSpell> {
    return super.deploy(overrides || {}) as Promise<BadSpell>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadSpell {
    return super.attach(address) as BadSpell;
  }
  connect(signer: Signer): BadSpell__factory {
    return super.connect(signer) as BadSpell__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadSpellInterface {
    return new utils.Interface(_abi) as BadSpellInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadSpell {
    return new Contract(address, _abi, signerOrProvider) as BadSpell;
  }
}
