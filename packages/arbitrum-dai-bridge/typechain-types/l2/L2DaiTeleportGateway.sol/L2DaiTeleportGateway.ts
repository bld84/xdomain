/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TeleportGUIDStruct = {
  sourceDomain: PromiseOrValue<BytesLike>;
  targetDomain: PromiseOrValue<BytesLike>;
  receiver: PromiseOrValue<BytesLike>;
  operator: PromiseOrValue<BytesLike>;
  amount: PromiseOrValue<BigNumberish>;
  nonce: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
};

export type TeleportGUIDStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  number
] & {
  sourceDomain: string;
  targetDomain: string;
  receiver: string;
  operator: string;
  amount: BigNumber;
  nonce: BigNumber;
  timestamp: number;
};

export interface L2DaiTeleportGatewayInterface extends utils.Interface {
  functions: {
    "batchedDaiToFlush(bytes32)": FunctionFragment;
    "close()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "domain()": FunctionFragment;
    "file(bytes32,bytes32,uint256)": FunctionFragment;
    "flush(bytes32)": FunctionFragment;
    "initiateTeleport(bytes32,bytes32,uint128,bytes32)": FunctionFragment;
    "initiateTeleport(bytes32,address,uint128)": FunctionFragment;
    "initiateTeleport(bytes32,address,uint128,address)": FunctionFragment;
    "isOpen()": FunctionFragment;
    "l1TeleportGateway()": FunctionFragment;
    "l2Token()": FunctionFragment;
    "nonce()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "validDomains(bytes32)": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchedDaiToFlush"
      | "close"
      | "deny"
      | "domain"
      | "file"
      | "flush"
      | "initiateTeleport(bytes32,bytes32,uint128,bytes32)"
      | "initiateTeleport(bytes32,address,uint128)"
      | "initiateTeleport(bytes32,address,uint128,address)"
      | "isOpen"
      | "l1TeleportGateway"
      | "l2Token"
      | "nonce"
      | "rely"
      | "validDomains"
      | "wards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchedDaiToFlush",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deny",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,bytes32,uint128,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,address,uint128)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTeleport(bytes32,address,uint128,address)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1TeleportGateway",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "l2Token", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rely",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validDomains",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "wards",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchedDaiToFlush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,bytes32,uint128,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,address,uint128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTeleport(bytes32,address,uint128,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1TeleportGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l2Token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Closed()": EventFragment;
    "Deny(address)": EventFragment;
    "File(bytes32,bytes32,uint256)": EventFragment;
    "Flushed(bytes32,uint256)": EventFragment;
    "Rely(address)": EventFragment;
    "TeleportInitialized(tuple)": EventFragment;
    "TxToL1(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TeleportInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL1"): EventFragment;
}

export interface ClosedEventObject {}
export type ClosedEvent = TypedEvent<[], ClosedEventObject>;

export type ClosedEventFilter = TypedEventFilter<ClosedEvent>;

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface FileEventObject {
  what: string;
  domain: string;
  data: BigNumber;
}
export type FileEvent = TypedEvent<
  [string, string, BigNumber],
  FileEventObject
>;

export type FileEventFilter = TypedEventFilter<FileEvent>;

export interface FlushedEventObject {
  targetDomain: string;
  dai: BigNumber;
}
export type FlushedEvent = TypedEvent<[string, BigNumber], FlushedEventObject>;

export type FlushedEventFilter = TypedEventFilter<FlushedEvent>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface TeleportInitializedEventObject {
  teleport: TeleportGUIDStructOutput;
}
export type TeleportInitializedEvent = TypedEvent<
  [TeleportGUIDStructOutput],
  TeleportInitializedEventObject
>;

export type TeleportInitializedEventFilter =
  TypedEventFilter<TeleportInitializedEvent>;

export interface TxToL1EventObject {
  from: string;
  to: string;
  id: BigNumber;
  data: string;
}
export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string],
  TxToL1EventObject
>;

export type TxToL1EventFilter = TypedEventFilter<TxToL1Event>;

export interface L2DaiTeleportGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2DaiTeleportGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchedDaiToFlush(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domain(overrides?: CallOverrides): Promise<[string]>;

    file(
      what: PromiseOrValue<BytesLike>,
      domain: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<[string]>;

    l2Token(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validDomains(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  batchedDaiToFlush(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  close(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deny(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domain(overrides?: CallOverrides): Promise<string>;

  file(
    what: PromiseOrValue<BytesLike>,
    domain: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flush(
    targetDomain: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,address,uint128)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initiateTeleport(bytes32,address,uint128,address)"(
    targetDomain: PromiseOrValue<BytesLike>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOpen(overrides?: CallOverrides): Promise<BigNumber>;

  l1TeleportGateway(overrides?: CallOverrides): Promise<string>;

  l2Token(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  rely(
    usr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validDomains(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    batchedDaiToFlush(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(overrides?: CallOverrides): Promise<void>;

    deny(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    domain(overrides?: CallOverrides): Promise<string>;

    file(
      what: PromiseOrValue<BytesLike>,
      domain: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<string>;

    l2Token(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    rely(usr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    validDomains(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Closed()"(): ClosedEventFilter;
    Closed(): ClosedEventFilter;

    "Deny(address)"(usr?: PromiseOrValue<string> | null): DenyEventFilter;
    Deny(usr?: PromiseOrValue<string> | null): DenyEventFilter;

    "File(bytes32,bytes32,uint256)"(
      what?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BytesLike> | null,
      data?: null
    ): FileEventFilter;
    File(
      what?: PromiseOrValue<BytesLike> | null,
      domain?: PromiseOrValue<BytesLike> | null,
      data?: null
    ): FileEventFilter;

    "Flushed(bytes32,uint256)"(
      targetDomain?: PromiseOrValue<BytesLike> | null,
      dai?: null
    ): FlushedEventFilter;
    Flushed(
      targetDomain?: PromiseOrValue<BytesLike> | null,
      dai?: null
    ): FlushedEventFilter;

    "Rely(address)"(usr?: PromiseOrValue<string> | null): RelyEventFilter;
    Rely(usr?: PromiseOrValue<string> | null): RelyEventFilter;

    "TeleportInitialized(tuple)"(
      teleport?: null
    ): TeleportInitializedEventFilter;
    TeleportInitialized(teleport?: null): TeleportInitializedEventFilter;

    "TxToL1(address,address,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TxToL1EventFilter;
    TxToL1(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TxToL1EventFilter;
  };

  estimateGas: {
    batchedDaiToFlush(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    file(
      what: PromiseOrValue<BytesLike>,
      domain: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOpen(overrides?: CallOverrides): Promise<BigNumber>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<BigNumber>;

    l2Token(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validDomains(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchedDaiToFlush(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deny(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    file(
      what: PromiseOrValue<BytesLike>,
      domain: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flush(
      targetDomain: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,bytes32,uint128,bytes32)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,address,uint128)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initiateTeleport(bytes32,address,uint128,address)"(
      targetDomain: PromiseOrValue<BytesLike>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1TeleportGateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validDomains(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
