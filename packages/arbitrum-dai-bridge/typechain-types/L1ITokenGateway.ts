/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L1ITokenGatewayInterface extends utils.Interface {
  functions: {
    "calculateL2TokenAddress(address)": FunctionFragment;
    "counterpartGateway()": FunctionFragment;
    "finalizeInboundTransfer(address,address,address,uint256,bytes)": FunctionFragment;
    "outboundTransfer(address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateL2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "counterpartGateway",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeInboundTransfer",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "outboundTransfer",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateL2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "counterpartGateway",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeInboundTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outboundTransfer",
    data: BytesLike
  ): Result;

  events: {
    "DepositInitiated(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawalFinalized(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalFinalized"): EventFragment;
}

export type DepositInitiatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    l1Token: string;
    from: string;
    to: string;
    sequenceNumber: BigNumber;
    amount: BigNumber;
  }
>;

export type DepositInitiatedEventFilter =
  TypedEventFilter<DepositInitiatedEvent>;

export type WithdrawalFinalizedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    l1Token: string;
    from: string;
    to: string;
    exitNum: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawalFinalizedEventFilter =
  TypedEventFilter<WithdrawalFinalizedEvent>;

export interface L1ITokenGateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1ITokenGatewayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    counterpartGateway(overrides?: CallOverrides): Promise<[string]>;

    finalizeInboundTransfer(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    outboundTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateL2TokenAddress(
    l1Token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  counterpartGateway(overrides?: CallOverrides): Promise<string>;

  finalizeInboundTransfer(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  outboundTransfer(
    token: string,
    to: string,
    amount: BigNumberish,
    maxGas: BigNumberish,
    gasPriceBid: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    counterpartGateway(overrides?: CallOverrides): Promise<string>;

    finalizeInboundTransfer(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    outboundTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DepositInitiated(address,address,address,uint256,uint256)"(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      sequenceNumber?: BigNumberish | null,
      amount?: null
    ): DepositInitiatedEventFilter;
    DepositInitiated(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      sequenceNumber?: BigNumberish | null,
      amount?: null
    ): DepositInitiatedEventFilter;

    "WithdrawalFinalized(address,address,address,uint256,uint256)"(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      exitNum?: BigNumberish | null,
      amount?: null
    ): WithdrawalFinalizedEventFilter;
    WithdrawalFinalized(
      l1Token?: null,
      from?: string | null,
      to?: string | null,
      exitNum?: BigNumberish | null,
      amount?: null
    ): WithdrawalFinalizedEventFilter;
  };

  estimateGas: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    counterpartGateway(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeInboundTransfer(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    outboundTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateL2TokenAddress(
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    counterpartGateway(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeInboundTransfer(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    outboundTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      maxGas: BigNumberish,
      gasPriceBid: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
